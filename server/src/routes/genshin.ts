import { Router, Request, Response } from 'express'
import multer from 'multer'
import { genshinImportService } from '../services/genshinImportService'
import { authenticateToken, requireOwnership } from '../middleware/auth'
import { PrismaClient } from '@prisma/client'
import { logImport } from '../utils/importLogger'
import { normalizeItemName, isDuplicatePullInDB } from '../utils/normalizeUtils'

const router = Router()
const prisma = new PrismaClient()

// Configure multer for file uploads
const storage = multer.memoryStorage()
const upload = multer({ 
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/json') {
      cb(null, true)
    } else {
      cb(new Error('Only JSON files are allowed'))
    }
  }
})

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Genshin Impact –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/import', authenticateToken, async (req: Request, res: Response) => {
  try {
    const { gachaUrl } = req.body

    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    const userId = req.user.id;
    console.log(`üåê Starting Genshin URL import for user ID: ${userId}`)
    console.log(`üîó URL: ${gachaUrl.substring(0, 50)}...`)

    if (!gachaUrl) {
      return res.status(400).json({ error: 'Genshin Impact gacha URL is required' })
    }

    console.log(`üöÄ Starting Genshin data import process...`)
    const result = await genshinImportService.importGenshinData(gachaUrl, userId.toString())

    if (result.success) {
      res.json({
        message: result.message,
        stats: result.stats
      })
    } else {
      res.status(400).json({
        error: result.message
      })
    }

  } catch (error: any) {
    console.error('Error importing Genshin data:', error)
    res.status(500).json({ error: 'Failed to import Genshin data' })
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Genshin Impact
router.get('/stats', authenticateToken, async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    const userId = req.user.id;
        const stats = await genshinImportService.getGenshinStats(userId.toString())
    res.json(stats)

  } catch (error: any) {
    console.error('Error getting Genshin stats:', error)
    res.status(500).json({ error: 'Failed to get Genshin stats' })
  }
})

// –ü–æ–ª—É—á–µ–Ω–∏–µ URL –¥–ª—è Genshin Impact (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ PowerShell —Å–∫—Ä–∏–ø—Ç–∞)
router.post('/get-url', authenticateToken, async (req: Request, res: Response) => {
  try {
    const { region } = req.body // 'global' –∏–ª–∏ 'china'
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è PowerShell —Å–∫—Ä–∏–ø—Ç–∞
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    res.json({
      message: 'Please run the PowerShell script to get your Genshin Impact wish history URL',
      instructions: [
        '1. Close Genshin Impact if it\'s running',
        '2. Open Genshin Impact and go to Wish History',
        '3. Run the PowerShell script: scripts/get-genshin-url.ps1',
        '4. Copy the URL that appears',
        '5. Paste it back into the import form'
      ],
      scriptPath: 'scripts/get-genshin-url.ps1'
    })

  } catch (error: any) {
    console.error('Error getting Genshin URL:', error)
    res.status(500).json({ error: 'Failed to get Genshin URL' })
  }
})

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫—Ä—É—Ç–æ–∫ Genshin Impact –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/clear-pulls', authenticateToken, async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    const user = req.user!
    const userId = req.user.id;

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä—É—Ç–∫–∏ Genshin –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const deleteResult = await prisma.gachaPull.deleteMany({
      where: {
        userId: user.id,
        game: 'GENSHIN'
      }
    })

    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ UserStats –¥–ª—è Genshin
    await prisma.userStats.deleteMany({
      where: {
        userId: user.id,
        game: 'GENSHIN'
      }
    })

    console.log(`Cleared ${deleteResult.count} Genshin pulls for user ${userId}`)
    res.json({
      message: `Successfully cleared ${deleteResult.count} Genshin Impact pulls`,
      deletedCount: deleteResult.count
    })

  } catch (error: any) {
    console.error('Error clearing Genshin pulls:', error)
    res.status(500).json({ error: 'Failed to clear Genshin pulls' })
  }
})

// –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö Genshin Impact –∏–∑ JSON —Ñ–∞–π–ª–∞ (paimon-moe —Ñ–æ—Ä–º–∞—Ç) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/import/json', authenticateToken, upload.single('gachaFile'), async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' })
    }

    const user = req.user!
    const userId = req.user.id;

    let jsonData
    try {
      jsonData = JSON.parse(req.file.buffer.toString())
    } catch (error) {
      return res.status(400).json({ error: 'Invalid JSON format' })
    }

    console.log(`üìÅ Processing paimon-moe Genshin JSON file for user ID: ${userId}`)
    console.log(`üîç Detected paimon-moe format, starting data conversion...`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
    if (!isPaimonMoeFormat(jsonData)) {
      return res.status(400).json({ error: 'Invalid paimon-moe format. Please upload a valid paimon-moe JSON file.' })
    }

    console.log(`üöÄ Processing paimon-moe JSON data for user ID: ${userId}`)

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ paimon-moe
    const result = await processPaimonMoeData(prisma, user.id, userId.toString(), jsonData)

    res.json(result)

  } catch (error: any) {
    console.error('Error importing Genshin JSON data:', error)
    res.status(500).json({ error: 'Failed to import Genshin JSON data' })
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ paimon-moe
function isPaimonMoeFormat(data: any): boolean {
  console.log(`üîç Checking paimon-moe format detection...`);
  console.log(`üìä Data type: ${typeof data}`);
  console.log(`üîë Available keys: ${Object.keys(data || {}).join(', ')}`);

  // paimon-moe format has specific structure with different banner types
  // Support both old and new paimon-moe formats
  const hasOldFormat = data && typeof data === 'object' && (
    data['wish-counter-character-event'] ||
    data['wish-counter-chronicled'] ||
    data['wish-counter-standard'] ||
    data['wish-counter-weapon-event']
  );

  // Check for new format with 'default' wrapper
  const hasNewFormatWrapper = data && typeof data === 'object' && data['default'] && typeof data['default'] === 'object';
  const innerData = hasNewFormatWrapper ? data['default'] : data;

  const hasNewFormat = innerData && typeof innerData === 'object' && (
    innerData['character'] ||
    innerData['lightcone'] ||
    innerData['standard'] ||
    innerData['beginner']
  );

  console.log(`üìã Old format detected: ${hasOldFormat}`);
  console.log(`üìã New format wrapper detected: ${hasNewFormatWrapper}`);
  console.log(`üìã New format detected: ${hasNewFormat}`);

  if (hasNewFormatWrapper) {
    console.log(`üì¶ Data wrapped in 'default' key, inner keys: ${Object.keys(innerData).join(', ')}`);
  }

  const result = hasOldFormat || hasNewFormat;
  console.log(`‚úÖ Final result: ${result}`);

  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ paimon-moe
async function processPaimonMoeData(prisma: PrismaClient, userId: number, userUid: string, jsonData: any) {
  let importedCount = 0
  let skippedCount = 0
  let errorCount = 0

  // Track import start time to distinguish within-batch vs cross-import duplicates
  const importStartTime = new Date()
  console.log(`‚è∞ Import session started at: ${importStartTime.toISOString()}`)

  // Check if data is wrapped in 'default' key
  const actualData = jsonData['default'] || jsonData;
  console.log(`üì¶ Processing data ${jsonData['default'] ? 'from' : 'without'} 'default' wrapper`);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫—Ä—É—Ç–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤
  const allPulls: any[] = []

  // –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –±–∞–Ω–Ω–µ—Ä–æ–≤ paimon-moe –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
  const bannerTypeMapping: { [key: string]: { bannerId: string, bannerName: string, bannerType: string } } = {
    // Old format keys
    'wish-counter-character-event': { bannerId: 'genshin_301', bannerName: 'Character Event Wish', bannerType: 'character' },
    'wish-counter-chronicled': { bannerId: 'genshin_400', bannerName: 'Chronicled Wish', bannerType: 'chronicled' },
    'wish-counter-standard': { bannerId: 'genshin_200', bannerName: 'Wanderlust Invocation', bannerType: 'standard' },
    'wish-counter-weapon-event': { bannerId: 'genshin_302', bannerName: 'Weapon Event Wish', bannerType: 'weapon' },
    // New format keys
    'character': { bannerId: 'genshin_301', bannerName: 'Character Event Wish', bannerType: 'character' },
    'lightcone': { bannerId: 'genshin_302', bannerName: 'Weapon Event Wish', bannerType: 'weapon' },
    'standard': { bannerId: 'genshin_200', bannerName: 'Wanderlust Invocation', bannerType: 'standard' },
    'beginner': { bannerId: 'genshin_100', bannerName: 'Beginners\' Wish', bannerType: 'beginner' }
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –±–∞–Ω–Ω–µ—Ä–∞
  for (const [bannerKey, bannerInfo] of Object.entries(bannerTypeMapping)) {
    let pulls = [];

    // Check both old format (direct) and new format (in actualData)
    if (actualData[bannerKey]?.pulls) {
      pulls = actualData[bannerKey].pulls;
    } else if (Array.isArray(actualData[bannerKey])) {
      pulls = actualData[bannerKey];
    }

    if (pulls.length > 0) {
      console.log(`üìã Processing ${pulls.length} pulls from banner: ${bannerKey}`);
      
      // Log first pull structure for debugging
      if (pulls.length > 0) {
        console.log(`üîç First pull structure:`, JSON.stringify(pulls[0], null, 2));
      }

      for (const pull of pulls) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ paimon-moe –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø –∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
    const itemName = pull.name || pull.item_id || pull.id || 'Unknown Item'
    const itemType = (pull.type === 'character' || pull.type === 'Character' || pull.type === 'ËßíËâ≤') ? 'Character' : 'Weapon'
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º rankType: –µ—Å–ª–∏ –µ—Å—Ç—å rate=1 –∏–ª–∏ pity –≤—ã—Å–æ–∫–∏–π, —Ç–æ 5*, –∏–Ω–∞—á–µ 4* –∏–ª–∏ 3*
        let rankType = 3; // default to 3*
        if (pull.rate === 1 || pull.pity >= 70) {
          rankType = 5;
        } else if (pull.pity >= 8) {
          rankType = 4;
        }
        
        const standardPull = {
          id: `genshin_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
          gacha_type: bannerInfo.bannerId, // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
          name: itemName,
          item_type: itemType,
          rank_type: rankType,
          time: pull.time,
          banner_name: bannerInfo.bannerName,
          banner_type: bannerInfo.bannerType,
          game: 'GENSHIN'
        }

        allPulls.push(standardPull)
      }
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  allPulls.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime())

  console.log(`üìä Total pulls collected: ${allPulls.length}`);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫—Ä—É—Ç–∫—É
  const totalPulls = allPulls.length;
  console.log(`üìä Starting Genshin import: ${totalPulls} pulls to process`);

  for (let i = 0; i < allPulls.length; i++) {
    const pull = allPulls[i];

    // Log progress every 10% or every 100 pulls
    if (i % Math.max(1, Math.floor(totalPulls / 10)) === 0 || i % 100 === 0) {
      const progress = ((i / totalPulls) * 100).toFixed(1);
      console.log(`üîÑ Genshin Import Progress: ${i}/${totalPulls} pulls (${progress}%) - Imported: ${importedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);
    }

    try {
      // Validate required fields
      if (!pull.name || pull.name.trim() === '') {
        console.warn(`‚ö†Ô∏è Skipping pull with empty name: ${JSON.stringify(pull)}`);
        skippedCount++;
        continue;
      }

      if (!pull.time) {
        console.warn(`‚ö†Ô∏è Skipping pull with invalid time: ${JSON.stringify(pull)}`);
        skippedCount++;
        continue;
      }

      console.log(`üîç Processing pull: ${pull.name} at ${pull.time}`);
      console.log(`üìä Using banner: ${pull.gacha_type} (${pull.banner_name})`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã: —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ò –≤—Ä–µ–º–µ–Ω–∏
      // –¢–æ–ª—å–∫–æ –∏–∑ –ü–†–ï–î–´–î–£–©–ò–• –∏–º–ø–æ—Ä—Ç–æ–≤, –Ω–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 10-pull –±–∞—Ç—á–µ–π)
      const normalizedName = normalizeItemName(pull.name);
      const pullTime = new Date(pull.time);
      
      const isDuplicate = await isDuplicatePullInDB(
        prisma, 
        userId, 
        normalizedName, 
        pull.gacha_type, 
        pullTime, 
        importStartTime // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–º–ø–æ—Ä—Ç–∞
      );
      
      if (isDuplicate) {
        console.log(`‚è≠Ô∏è Skipping duplicate pull: ${pull.name} at ${pull.time} (normalized: ${normalizedName})`);
        skippedCount++;
        await logImport({ source: 'JSON_IMPORT', action: 'SKIP_DUPLICATE', uid: userUid, gachaId: `genshin_${pull.id}`, itemName: pull.name, bannerId: pull.gacha_type });
        continue;
      }

      console.log(`‚úÖ Pull ${pull.name} at ${pull.time} passed validation, proceeding with import`);

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–Ω–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      let banner = await prisma.banner.findUnique({
        where: { 
          bannerId_game: {
            bannerId: pull.gacha_type,
            game: 'GENSHIN'
          }
        }
      })

      if (!banner) {
        console.log(`üìù Creating banner: ${pull.gacha_type} (${pull.banner_name})`);
        banner = await prisma.banner.create({
          data: {
            bannerId: pull.gacha_type,
            bannerName: pull.banner_name,
            bannerType: pull.banner_type,
            game: 'GENSHIN'
          }
        })
        console.log(`‚úÖ Banner created successfully`);
      } else {
        console.log(`üìã Using existing banner: ${pull.gacha_type}`);
      }

      // –í—ã—á–∏—Å–ª—è–µ–º pity count
      const previousPulls = await prisma.gachaPull.findMany({
        where: {
          userId,
          bannerId: pull.gacha_type,
          game: 'GENSHIN',
          time: { lt: new Date(pull.time) }
        },
        orderBy: { time: 'desc' }
      })

      let pityCount = 1
      for (const prevPull of previousPulls) {
        if (prevPull.rankType === 5) break
        pityCount++
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∫—Ä—É—Ç–∫–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏)
      await prisma.gachaPull.create({
        data: {
          userId,
          bannerId: pull.gacha_type,
          gachaId: `genshin_${pull.id}`, // –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
          itemName: normalizeItemName(pull.name), // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
          itemType: pull.item_type,
          rankType: pull.rank_type,
          time: new Date(pull.time),
          pityCount,
          game: 'GENSHIN',
          isFeatured: pull.rate === 1 // 5* –ø—Ä–µ–¥–º–µ—Ç—ã —Å—á–∏—Ç–∞–µ–º featured
        }
      })

  await logImport({ source: 'JSON_IMPORT', action: 'IMPORTED', uid: userUid, gachaId: `genshin_${pull.id}`, itemName: pull.name, bannerId: pull.gacha_type })

      console.log(`‚úÖ Successfully imported pull: ${pull.name} at ${pull.time}`);
      importedCount++
    } catch (error: any) {
      if (error.code === 'P2002') {
        console.log(`‚è≠Ô∏è Skipping duplicate pull: ${pull.name} at ${pull.time} - ${error.message}`);
        skippedCount++;
      } else {
        console.error(`‚ùå Error processing Genshin pull ${pull.name} at ${pull.time}:`, error.message);
        console.error(`   Pull data:`, JSON.stringify(pull));
        errorCount++;
      }
    }
  }

  // Final progress log
  console.log(`‚úÖ Genshin Import Complete: ${totalPulls} pulls processed - Imported: ${importedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateGenshinUserStats(prisma, userId)

  return {
    message: 'Genshin Impact data from paimon-moe processed successfully',
    imported: importedCount,
    skipped: skippedCount,
    errors: errorCount,
    total: allPulls.length
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Genshin Impact
async function updateGenshinUserStats(prisma: PrismaClient, userId: number) {
  const bannerTypes: (keyof typeof import('@prisma/client').BannerType)[] = ['character', 'weapon', 'standard', 'chronicled']

  for (const bannerType of bannerTypes) {
    const pulls = await prisma.gachaPull.findMany({
      where: {
        userId,
        game: 'GENSHIN',
        banner: {
          bannerType
        }
      },
      orderBy: { time: 'desc' }
    })

    const totalPulls = pulls.length
    const fiveStarCount = pulls.filter((p: any) => p.rankType === 5).length
    const fourStarCount = pulls.filter((p: any) => p.rankType === 4).length
    const threeStarCount = pulls.filter((p: any) => p.rankType === 3).length

    let currentPity = 0
    let lastFiveStarTime = null

    for (const pull of pulls) {
      if (pull.rankType === 5) {
        lastFiveStarTime = pull.time
        break
      }
      currentPity++
    }

    await prisma.userStats.upsert({
      where: {
        unique_user_banner_game: {
          userId,
          bannerType: bannerType as string,
          game: 'GENSHIN'
        }
      },
      update: {
        totalPulls,
        fiveStarCount,
        fourStarCount,
        threeStarCount,
        currentPity,
        lastFiveStarTime
      },
      create: {
        userId,
        bannerType: bannerType as string,
        game: 'GENSHIN',
        totalPulls,
        fiveStarCount,
        fourStarCount,
        threeStarCount,
        currentPity,
        lastFiveStarTime
      }
    })
  }
}

export default router
