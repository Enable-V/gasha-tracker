import { Router } from 'express';
import multer from 'multer';
import type { Response } from 'express';
import { authenticateToken, requireOwnership, AuthRequest } from '../middleware/auth'
import { PrismaClient } from '@prisma/client'
import { getItemRarity } from '../utils/normalizeUtils'

const router = Router();
const prisma = new PrismaClient();

// Configure multer for file uploads
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype === 'application/json') {
      cb(null, true);
    } else {
      cb(new Error('Only JSON files are allowed'));
    }
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
const uploadProgress: { [key: string]: {
  progress: number,
  message: string,
  completed: boolean,
  imported: number,
  skipped: number,
  errors: number,
  total: number,
  currentItem?: string
} } = {}

// Upload gacha data from JSON file for current user (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/json', authenticateToken, upload.single('gachaFile'), async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ middleware
    const user = req.user!;
    const userId = req.user.id;
    const uploadId = `${userId}_${Date.now()}`;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    uploadProgress[uploadId] = {
      progress: 0,
      message: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...',
      completed: false,
      imported: 0,
      skipped: 0,
      errors: 0,
      total: 0
    };

    let gachaData;
    try {
      gachaData = JSON.parse(req.file.buffer.toString());
    } catch (error) {
      return res.status(400).json({ error: 'Invalid JSON format' });
    }

    console.log(`üìÅ Processing pom-moe HSR JSON file for user ID: ${userId}`)
    console.log(`üìä JSON keys found: ${Object.keys(gachaData).join(', ')}`)

    // Check if data is wrapped in "default" and extract it for logging
    let dataForLogging = gachaData;
    if (gachaData && typeof gachaData === 'object' && gachaData.default) {
      console.log(`üì¶ Data wrapped in 'default' key, inner keys: ${Object.keys(gachaData.default).join(', ')}`);
      dataForLogging = gachaData.default;
    }

    console.log(`üîç Checking pom-moe format...`)

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º
    let result;
    if (isPomMoeFormat(gachaData)) {
      console.log(`‚úÖ Pom-moe format detected successfully!`);
      console.log(`üöÄ Processing pom-moe HSR data for user ID: ${userId}`);

      // –°–¥–µ–ª–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
      uploadProgress[uploadId] = {
        progress: 0,
        message: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É JSON —Ñ–∞–π–ª–∞...',
        completed: false,
        imported: 0,
        skipped: 0,
        errors: 0,
        total: 0
      };

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      processPomMoeData(prisma, user.id, gachaData, uploadId).then((result) => {
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
        uploadProgress[uploadId] = {
          progress: 100,
          message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
          completed: true,
          imported: result.imported || 0,
          skipped: result.skipped || 0,
          errors: result.errors || 0,
          total: result.total || 0
        };
      }).catch((error) => {
        uploadProgress[uploadId] = {
          progress: 100,
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö',
          completed: true,
          imported: 0,
          skipped: 0,
          errors: 1,
          total: 0
        };
      });

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É uploadId
      res.json({
        message: 'Upload started',
        uploadId
      });
      return;
    } else {
      console.log(`‚ùå Pom-moe format NOT detected!`);
      console.log(`üîç Available keys: ${Object.keys(gachaData).join(', ')}`);
      return res.status(400).json({ error: 'Unsupported format. Please upload a valid pom-moe JSON file for HSR.' });
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      delete uploadProgress[uploadId];
    }, 30000);

    res.json({
      ...result,
      uploadId
    });
  } catch (error) {
    console.error('Error uploading gacha data:', error);
    res.status(500).json({ error: 'Failed to upload gacha data' });
  }
});

// Upload gacha data from HSR URL (—Ç–µ–ø–µ—Ä—å —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)


// Upload gacha data from HSR URL for current user (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/url', authenticateToken, async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    const { url } = req.body;
    const userId = req.user.id;

    console.log(`üåê Starting HSR URL import for user ID: ${userId}`)
    console.log(`üîó URL: ${url.substring(0, 50)}...`)

    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const uploadId = `hsr_url_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    uploadProgress[uploadId] = {
      progress: 0,
      message: '–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...',
      completed: false,
      imported: 0,
      skipped: 0,
      errors: 0,
      total: 0
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      delete uploadProgress[uploadId];
    }, 30000);

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ middleware
    const user = req.user!;

    // Extract authkey from URL
    const authkey = extractAuthkey(url);
    console.log(`üîë Authkey extracted, starting data fetch...`)
    if (!authkey) {
      console.error(`Invalid URL format for user ID: ${userId}`);
      return res.status(400).json({ error: 'Invalid HSR URL format. Please make sure you copied the complete URL.' });
    }

    console.log(`Extracted authkey for user ID: ${userId}`);

    // –°–æ–∑–¥–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const onFetchProgress = (progress: number, message: string, imported?: number, skipped?: number, errors?: number, total?: number, currentItem?: string) => {
      uploadProgress[uploadId] = {
        progress,
        message,
        completed: false,
        imported: imported || 0,
        skipped: skipped || 0,
        errors: errors || 0,
        total: total || 0,
        currentItem
      };
    };

    // Fetch gacha data from HSR API with progress updates
    fetchGachaDataFromAPI(authkey, url, uploadId).then(gachaData => {
      console.log(`Fetched ${gachaData.length} gacha records for user ID: ${userId}`);

      if (gachaData.length === 0) {
        uploadProgress[uploadId] = {
          progress: 0,
          message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
          completed: true,
          imported: 0,
          skipped: 0,
          errors: 1,
          total: 0
        };
        return;
      }

      // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      return processGachaData(prisma, user.id, gachaData, uploadId);
    }).then((result) => {
      // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
      uploadProgress[uploadId] = {
        progress: 100,
        message: '–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
        completed: true,
        imported: result.imported || 0,
        skipped: result.skipped || 0,
        errors: result.errors || 0,
        total: result.total || 0
      };
    }).catch((error) => {
      console.error('Error processing gacha data:', error);
      uploadProgress[uploadId] = {
        progress: 0,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö',
        completed: true,
        imported: 0,
        skipped: 0,
        errors: 1,
        total: 0
      };
    });

    console.log(`Import started for user ID: ${userId}`);

    res.json({
      message: 'Import started successfully',
      uploadId
    });
  } catch (error: any) {
    console.error('Error fetching gacha data from URL:', error);
    res.status(500).json({
      error: 'Failed to fetch gacha data from URL',
      details: error.message
    });
  }
});

// Helper function to extract authkey from URL
function extractAuthkey(url: string): string | null {
  try {
    const urlObj = new URL(url);
    return urlObj.searchParams.get('authkey');
  } catch {
    return null;
  }
}

// Helper function to get base URL from the provided URL
function getBaseURL(url: string): string {
  try {
    const urlObj = new URL(url);
    return `${urlObj.protocol}//${urlObj.host}${urlObj.pathname}`;
  } catch {
    return 'https://api-os-takumi.mihoyo.com/common/gacha_record/api/getGachaLog';
  }
}

// Helper function to fetch gacha data from HSR API
async function fetchGachaDataFromAPI(authkey: string, originalUrl: string, uploadId: string): Promise<any[]> {
  const axios = await import('axios');
  const allPulls: any[] = [];
  
  // HSR gacha types - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç pom-moe
  const gachaTypes = [
    { id: '1', name: 'Stellar Warp (Standard)', type: 'standard' },
    { id: '2', name: 'Departure Warp (Beginner)', type: 'beginner' }, 
    { id: '11', name: 'Character Event Warp', type: 'character' },
    { id: '12', name: 'Light Cone Event Warp', type: 'lightcone' }
  ];
  
  const baseURL = getBaseURL(originalUrl);
  let totalBannersProcessed = 0;
  const totalBanners = gachaTypes.length;
  
  for (const gachaType of gachaTypes) {
    let page = 1;
    let endId = '0';
    let hasMore = true;
    let bannerProgress = 0;
    
    uploadProgress[uploadId] = {
      ...uploadProgress[uploadId],
      progress: Math.round((totalBannersProcessed / totalBanners) * 100),
      message: `–ó–∞–≥—Ä—É–∂–∞–µ–º ${gachaType.name}...`,
      currentItem: `–ë–∞–Ω–Ω–µ—Ä: ${gachaType.name}`
    };
    
    while (hasMore) {
      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ, –º–µ–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const requestUrl = new URL(originalUrl);
        requestUrl.searchParams.set('gacha_type', gachaType.id);
        requestUrl.searchParams.set('page', page.toString());
        requestUrl.searchParams.set('size', '20');
        requestUrl.searchParams.set('end_id', endId);
        requestUrl.searchParams.set('lang', 'en');

        console.log(`Making request to banner ${gachaType.id} (${gachaType.name}), page ${page}, end_id: ${endId}`);
        
        uploadProgress[uploadId] = {
          ...uploadProgress[uploadId],
          progress: Math.round(((totalBannersProcessed + bannerProgress) / totalBanners) * 100),
          message: `${gachaType.name}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}...`,
          total: allPulls.length,
          currentItem: `–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${page}`
        };
        
        const response = await axios.default.get(requestUrl.toString(), {
          timeout: 15000,
          headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://webstatic-sea.mihoyo.com/',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-site'
          }
        });
        
        console.log(`Response received for banner ${gachaType.id}, status: ${response.status}`);
        
        const data = response.data;
        
        console.log(`API response: retcode=${data.retcode}, message="${data.message || 'OK'}"`);
        
        if (data.retcode !== 0) {
          if (data.retcode === -101) {
            throw new Error('Invalid authkey or authkey expired');
          }
          throw new Error(`API Error ${data.retcode}: ${data.message}`);
        }
        
        const pulls = data.data?.list || [];
        console.log(`Received ${pulls.length} pulls for banner ${gachaType.id}`);
        
        if (pulls.length === 0) {
          console.log(`No more pulls for banner ${gachaType.id}, moving to next banner`);
          hasMore = false;
        } else {
          allPulls.push(...pulls.map((pull: any) => ({
            ...pull,
            gacha_type: gachaType.id,
            banner_name: gachaType.name,
            banner_type: gachaType.type
          })));
          
          console.log(`Added ${pulls.length} pulls, total so far: ${allPulls.length}`);
          
          uploadProgress[uploadId] = {
            ...uploadProgress[uploadId],
            progress: Math.round(((totalBannersProcessed + bannerProgress) / totalBanners) * 100),
            message: `${gachaType.name}: –ø–æ–ª—É—á–µ–Ω–æ ${pulls.length} –∫—Ä—É—Ç–æ–∫`,
            total: allPulls.length,
            currentItem: `–í—Å–µ–≥–æ –∫—Ä—É—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–æ: ${allPulls.length}`
          };
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º end_id –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞)
          if (pulls.length > 0) {
            endId = pulls[pulls.length - 1].id;
            console.log(`Next end_id: ${endId}`);
          }
          
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
          if (pulls.length < 20) {
            console.log(`Received less than 20 pulls (${pulls.length}), this is the last page for banner ${gachaType.id}`);
            hasMore = false;
          } else {
            page++;
            bannerProgress = 0.8; // 80% –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
          }
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
          console.log(`Waiting 2 seconds before next request...`);
          
          uploadProgress[uploadId] = {
            ...uploadProgress[uploadId],
            progress: Math.round(((totalBannersProcessed + bannerProgress) / totalBanners) * 100),
            message: `${gachaType.name}: –æ–∂–∏–¥–∞–Ω–∏–µ 2 —Å–µ–∫...`,
            total: allPulls.length,
            currentItem: `–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏`
          };
          
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      } catch (error: any) {
        console.error(`Error fetching gacha type ${gachaType.id}:`, error.message);
        if (error.message.includes('Invalid authkey')) {
          throw error;
        }
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∏–ø–∞–º–∏ –±–∞–Ω–Ω–µ—Ä–æ–≤ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
        hasMore = false;
      }
    }
    
    totalBannersProcessed++;
    uploadProgress[uploadId] = {
      ...uploadProgress[uploadId],
      progress: Math.round((totalBannersProcessed / totalBanners) * 100),
      message: `${gachaType.name} –∑–∞–≤–µ—Ä—à–µ–Ω`,
      total: allPulls.length,
      currentItem: `–ë–∞–Ω–Ω–µ—Ä ${gachaType.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω`
    };
  }
  
  return allPulls;
}

// Helper function to process gacha data
async function processGachaData(prisma: any, userId: number, gachaData: any[], uploadId: string): Promise<any> {
  let importedCount = 0;
  let skippedCount = 0;
  let errorCount = 0;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const sortedData = gachaData.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());
  
  const totalPulls = sortedData.length;
  console.log(`üìä Starting HSR URL import: ${totalPulls} pulls to process`);

  // –ù–∞—á–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  uploadProgress[uploadId] = {
    ...uploadProgress[uploadId],
    progress: 0,
    message: '–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...'
  };
  
  for (let i = 0; i < sortedData.length; i++) {
    const pull = sortedData[i];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = Math.round(((i + 1) / totalPulls) * 100);
    uploadProgress[uploadId] = {
      ...uploadProgress[uploadId],
      progress,
      message: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É—Ç–∫–∏ ${i + 1}/${totalPulls}...`,
      imported: importedCount,
      skipped: skippedCount,
      errors: errorCount,
      total: totalPulls,
      currentItem: pull.name
    };

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —ç—Ç–∞ –∫—Ä—É—Ç–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingPull = await prisma.gachaPull.findFirst({
        where: {
          gachaId: pull.id,
          userId: userId
        }
      });
      
      if (existingPull) {
        skippedCount++;
        continue;
      }
      
      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –±–∞–Ω–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const bannerId = pull.gacha_type || pull.uigf_gacha_type;
      let banner = await prisma.banner.findUnique({
        where: { bannerId }
      });
      
      if (!banner) {
        // –°–æ–∑–¥–∞–µ–º –±–∞–Ω–µ—Ä –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const bannerNames: Record<string, { name: string; type: string }> = {
          '1': { name: 'Stellar Warp', type: 'standard' },
          '2': { name: 'Character Event Warp', type: 'character' },
          '11': { name: 'Light Cone Event Warp', type: 'weapon' },
          '12': { name: 'Departure Warp', type: 'beginner' }
        };
        
        const bannerInfo = bannerNames[bannerId] || { name: 'Unknown Banner', type: 'standard' };
        
        banner = await prisma.banner.create({
          data: {
            bannerId,
            bannerName: bannerInfo.name,
            bannerType: bannerInfo.type
          }
        });
      }
      
      // –í—ã—á–∏—Å–ª—è–µ–º pity count –¥–ª—è —ç—Ç–æ–≥–æ –±–∞–Ω–µ—Ä–∞
      const previousPulls = await prisma.gachaPull.findMany({
        where: {
          userId,
          bannerId,
          time: { lt: new Date(pull.time) }
        },
        orderBy: { time: 'desc' }
      });
      
      let pityCount = 1;
      for (const prevPull of previousPulls) {
        if (prevPull.rankType === 5) break;
        pityCount++;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π rarity –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const correctRarity = await getItemRarity(prisma, pull.name, 'HSR', Number(pull.rank_type));
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∫—Ä—É—Ç–∫–∏
      await prisma.gachaPull.create({
        data: {
          userId,
          bannerId,
          gachaId: pull.id,
          itemName: pull.name,
          itemType: pull.item_type || 'Unknown',
          rankType: correctRarity,
          time: new Date(pull.time),
          pityCount,
          isFeatured: false // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è featured
        }
      });
      
      importedCount++;
    } catch (error: any) {
      if (error.code === 'P2002') {
        // Duplicate key error
        skippedCount++;
      } else {
        errorCount++;
        console.error(`Error processing pull ${pull.id}:`, error);
      }
    }
  }
  
  // Update user statistics
  await updateUserStats(prisma, userId);
  
  // –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  uploadProgress[uploadId] = {
    ...uploadProgress[uploadId],
    progress: 100,
    message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!',
    imported: importedCount,
    skipped: skippedCount,
    errors: errorCount,
    total: totalPulls
  };

  return {
    message: 'Gacha data processed successfully',
    imported: importedCount,
    skipped: skippedCount,
    errors: errorCount,
    total: gachaData.length
  };
}

// Helper function to update user statistics
async function updateUserStats(prisma: any, userId: number) {
  const bannerTypes = ['character', 'weapon', 'standard', 'beginner'];
  
  for (const bannerType of bannerTypes) {
    const pulls = await prisma.gachaPull.findMany({
      where: {
        userId,
        bannerId: {
          in: getBannerIdsByType(bannerType)
        }
      },
      orderBy: { time: 'desc' }
    });
    
    const totalPulls = pulls.length;
    const fiveStarCount = pulls.filter((p: any) => p.rankType === 5).length;
    const fourStarCount = pulls.filter((p: any) => p.rankType === 4).length;
    const threeStarCount = pulls.filter((p: any) => p.rankType === 3).length;
    
    let currentPity = 0;
    let lastFiveStarTime = null;
    
    for (const pull of pulls) {
      if (pull.rankType === 5) {
        lastFiveStarTime = pull.time;
        break;
      }
      currentPity++;
    }
    
    await prisma.userStats.upsert({
      where: {
        unique_user_banner_game: {
          userId,
          bannerType,
          game: 'HSR'
        }
      },
      update: {
        totalPulls,
        fiveStarCount,
        fourStarCount,
        threeStarCount,
        currentPity,
        lastFiveStarTime
      },
      create: {
        userId,
        bannerType,
        game: 'HSR',
        totalPulls,
        fiveStarCount,
        fourStarCount,
        threeStarCount,
        currentPity,
        lastFiveStarTime
      }
    });
  }
}

// Helper function to get banner IDs by type
function getBannerIdsByType(bannerType: string): string[] {
  switch (bannerType) {
    case 'character': return ['1', '2'];
    case 'weapon': return ['12'];
    case 'standard': return ['11'];
    case 'beginner': return ['1'];
    default: return [];
  }
}

// Helper function to detect pom-moe format
function isPomMoeFormat(data: any): boolean {
  console.log(`üîç Checking pom-moe format detection...`);
  console.log(`üìä Data type: ${typeof data}`);
  console.log(`üîë Available keys: ${Object.keys(data || {}).join(', ')}`);

  // Check if data is wrapped in a "default" key
  let actualData = data;
  if (data && typeof data === 'object' && data.default && typeof data.default === 'object') {
    console.log(`üì¶ Found 'default' wrapper, checking inner data...`);
    console.log(`üîë Inner keys: ${Object.keys(data.default).join(', ')}`);
    actualData = data.default;
  }

  // pom-moe format has specific structure with different banner types
  // Support both old and new pom-moe formats
  const hasOldFormat = actualData && typeof actualData === 'object' && (
    actualData['wish-counter-character-event'] ||
    actualData['wish-counter-standard'] ||
    actualData['wish-counter-beginner'] ||
    actualData['wish-counter-chronicled'] ||
    actualData['wish-counter-weapon-event']
  );

  const hasNewFormat = actualData && typeof actualData === 'object' && (
    actualData['character'] ||
    actualData['lightcone'] ||
    actualData['standard'] ||
    actualData['beginner']
  );

  const hasPomMoeFields = actualData && typeof actualData === 'object' && (
    actualData['items'] ||
    actualData['bannerSummary']
  );

  console.log(`üìã Old format detected: ${hasOldFormat}`);
  console.log(`üìã New format detected: ${hasNewFormat}`);
  console.log(`üìã Pom-moe fields detected: ${hasPomMoeFields}`);

  const result = hasOldFormat || hasNewFormat || hasPomMoeFields;
  console.log(`‚úÖ Final result: ${result}`);

  return result;
}

// Helper function to process pom-moe HSR data
async function processPomMoeData(prisma: any, userId: number, jsonData: any, uploadId: string): Promise<any> {
  let importedCount = 0;
  let skippedCount = 0;
  let errorCount = 0;

  // Extract all pulls from different banner types
  const allPulls: any[] = [];

  // Check if data is wrapped in a "default" key
  let actualData = jsonData;
  if (jsonData && typeof jsonData === 'object' && jsonData.default && typeof jsonData.default === 'object') {
    console.log(`üì¶ Processing data from 'default' wrapper`);
    actualData = jsonData.default;
  }

  // Mapping of pom-moe banner types to standard format
  const bannerTypeMapping: { [key: string]: { bannerId: string, bannerName: string, bannerType: string } } = {
    // Old format keys
    'wish-counter-character-event': { bannerId: '11', bannerName: 'Character Event Warp', bannerType: 'character' },
    'wish-counter-standard': { bannerId: '1', bannerName: 'Stellar Warp', bannerType: 'standard' },
    'wish-counter-beginner': { bannerId: '2', bannerName: 'Departure Warp', bannerType: 'beginner' },
    'wish-counter-chronicled': { bannerId: '500', bannerName: 'Chronicled Wish', bannerType: 'chronicled' },
    'wish-counter-weapon-event': { bannerId: '12', bannerName: 'Light Cone Event Warp', bannerType: 'weapon' },
    // New format keys
    'character': { bannerId: '11', bannerName: 'Character Event Warp', bannerType: 'character' },
    'lightcone': { bannerId: '12', bannerName: 'Light Cone Event Warp', bannerType: 'weapon' },
    'standard': { bannerId: '1', bannerName: 'Stellar Warp', bannerType: 'standard' },
    'beginner': { bannerId: '2', bannerName: 'Departure Warp', bannerType: 'beginner' }
  };

  // Process each banner type
  for (const [bannerKey, bannerInfo] of Object.entries(bannerTypeMapping)) {
    if (actualData[bannerKey]) {
      const pulls = Array.isArray(actualData[bannerKey]) ? actualData[bannerKey] : actualData[bannerKey].pulls || [];

      for (const pull of pulls) {
        // Convert pom-moe data to standard format
        const itemName = pull.name || 'Unknown Item';
        const standardPull = {
          id: pull.id || `${pull.time}_${itemName}_${Math.random()}`,
          gacha_type: bannerInfo.bannerId,
          name: itemName,
          item_type: bannerKey === 'character' ? 'Character' : 'Light Cone',
          rank_type: pull.rarity || pull.rank_type || 3,
          time: pull.time,
          banner_name: bannerInfo.bannerName,
          banner_type: bannerInfo.bannerType,
          game: 'HSR'
        };

        allPulls.push(standardPull);
      }
    }
  }

  // Sort by time
  allPulls.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());

  // Process each pull
  const totalPulls = allPulls.length;
  console.log(`üìä Starting HSR import: ${totalPulls} pulls to process`);

  for (let i = 0; i < allPulls.length; i++) {
    const pull = allPulls[i];

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∫—Ä—É—Ç–∫–∏ (–Ω–æ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 50–º—Å)
    const progress = Math.round(((i + 1) / totalPulls) * 100);
    const message = `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä—É—Ç–∫–∏ ${i + 1} –∏–∑ ${totalPulls}`;
    
    uploadProgress[uploadId] = {
      ...uploadProgress[uploadId],
      progress,
      message,
      imported: importedCount,
      skipped: skippedCount,
      errors: errorCount,
      total: totalPulls,
      currentItem: pull.name
    };

    // Log progress every 10% or every 100 pulls
    if (i % Math.max(1, Math.floor(totalPulls / 10)) === 0 || i % 100 === 0) {
      console.log(`üîÑ HSR Import Progress: ${i}/${totalPulls} pulls (${progress}%) - Imported: ${importedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if (i % 10 === 0) {
      await new Promise(resolve => setTimeout(resolve, 10));
    }

    try {
      // Validate required fields
      if (!pull.name || pull.name.trim() === '') {
        console.warn(`Skipping pull with empty name: ${JSON.stringify(pull)}`);
        skippedCount++;
        continue;
      }

      if (!pull.time) {
        console.warn(`Skipping pull with invalid time: ${JSON.stringify(pull)}`);
        skippedCount++;
        continue;
      }

      // Check if this pull already exists
      const existingPull = await prisma.gachaPull.findFirst({
        where: {
          gachaId: pull.id,
          userId: userId,
          game: 'HSR'
        }
      });

      if (existingPull) {
        skippedCount++;
        continue;
      }

      // Ensure banner exists
      let banner = await prisma.banner.findUnique({
        where: { 
          bannerId_game: {
            bannerId: pull.gacha_type,
            game: 'HSR'
          }
        }
      });

      if (!banner) {
        banner = await prisma.banner.create({
          data: {
            bannerId: pull.gacha_type,
            bannerName: pull.banner_name,
            bannerType: pull.banner_type as any,
            game: 'HSR'
          }
        });
      }

      // Calculate pity count
      const previousPulls = await prisma.gachaPull.findMany({
        where: {
          userId,
          bannerId: pull.gacha_type,
          game: 'HSR',
          time: { lt: new Date(pull.time) }
        },
        orderBy: { time: 'desc' }
      });

      let pityCount = 1;
      for (const prevPull of previousPulls) {
        if (prevPull.rankType === 5) break;
        pityCount++;
      }

      // Create gacha pull record
      await prisma.gachaPull.create({
        data: {
          userId,
          bannerId: pull.gacha_type,
          gachaId: pull.id,
          itemName: pull.name || 'Unknown Item',
          itemType: pull.item_type,
          rankType: pull.rank_type,
          time: new Date(pull.time),
          pityCount,
          game: 'HSR',
          isFeatured: pull.rank_type === 5
        }
      });

      importedCount++;
    } catch (error: any) {
      if (error.code === 'P2002') {
        skippedCount++;
      } else {
        errorCount++;
        console.error(`Error processing HSR pull ${pull.id}:`, error);
      }
    }
  }

  // Final progress log
  console.log(`‚úÖ HSR Import Complete: ${totalPulls} pulls processed - Imported: ${importedCount}, Skipped: ${skippedCount}, Errors: ${errorCount}`);

  // Update user statistics
  await updateUserStats(prisma, userId);

  return {
    message: 'HSR data from pom-moe processed successfully',
    imported: importedCount,
    skipped: skippedCount,
    errors: errorCount,
    total: allPulls.length
  };
}

// Get upload progress
router.get('/progress/:uploadId', authenticateToken, (req: AuthRequest, res: Response) => {
  try {
    const { uploadId } = req.params;

    if (!req.user) {
      return res.status(401).json({
        error: 'Authentication required',
        message: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'
      });
    }

    const progress = uploadProgress[uploadId];

    if (!progress) {
      return res.status(404).json({ error: 'Upload not found' });
    }

    res.json(progress);
  } catch (error) {
    console.error('Error getting upload progress:', error);
    res.status(500).json({ error: 'Failed to get upload progress' });
  }
});

export default router;
