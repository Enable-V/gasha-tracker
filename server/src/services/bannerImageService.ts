import cron from 'node-cron'
import axios from 'axios'
import fs from 'fs'
import path from 'path'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

interface BannerImage {
  bannerName: string
  imageUrl: string
  bannerType: string
  version: string
}

class BannerImageService {
  private imagesDir: string

  constructor() {
    this.imagesDir = path.join(process.cwd(), 'public', 'images', 'banners')
    this.ensureDirectoryExists()
  }

  private ensureDirectoryExists() {
    if (!fs.existsSync(this.imagesDir)) {
      fs.mkdirSync(this.imagesDir, { recursive: true })
    }
  }

  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –±–∞–Ω–Ω–µ—Ä–∞—Ö HSR
  private async getOfficialBannerData(): Promise<BannerImage[]> {
    const banners: BannerImage[] = []

    try {
      // 1. HoYoLAB API (–Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π, –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π)
      const hoyolabResponse = await axios.get('https://bbs-api-os.hoyolab.com/game_record/hkrpg/api/avatar/basic', {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        },
        timeout: 10000
      })

      // 2. Enka.Network API –¥–ª—è HSR –¥–∞–Ω–Ω—ã—Ö
      const enkaResponse = await axios.get('https://api.hakush.in/hsr/data/en/banners.json', {
        timeout: 10000
      })

      if (enkaResponse.data) {
        Object.values(enkaResponse.data).forEach((banner: any) => {
          if (banner.name && banner.image) {
            banners.push({
              bannerName: banner.name,
              imageUrl: banner.image,
              bannerType: banner.type || 'unknown',
              version: banner.version || '1.0'
            })
          }
        })
      }

      // 3. GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å HSR —Ä–µ—Å—É—Ä—Å–∞–º–∏
      const githubResponse = await axios.get('https://api.github.com/repos/Mar-7th/StarRailRes/contents/icon/banner', {
        headers: {
          'Accept': 'application/vnd.github.v3+json'
        },
        timeout: 10000
      })

      if (Array.isArray(githubResponse.data)) {
        githubResponse.data.forEach((file: any) => {
          if (file.name.endsWith('.png') || file.name.endsWith('.jpg')) {
            const bannerName = file.name.replace(/\.(png|jpg)$/i, '').replace(/_/g, ' ')
            banners.push({
              bannerName,
              imageUrl: file.download_url,
              bannerType: 'github',
              version: 'latest'
            })
          }
        })
      }

    } catch (error) {
      console.error('Error fetching banner data:', error)
    }

    return banners
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞–Ω–Ω–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  private async getExistingBanners(): Promise<string[]> {
    try {
      const banners = await prisma.gachaPull.findMany({
        select: {
          banner: {
            select: {
              bannerName: true
            }
          }
        },
        distinct: ['bannerId']
      })

      return banners
        .map(b => b.banner?.bannerName)
        .filter(Boolean) as string[]
    } catch (error) {
      console.error('Error fetching existing banners:', error)
      return []
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  private async downloadImage(url: string, filename: string): Promise<boolean> {
    try {
      const response = await axios.get(url, {
        responseType: 'stream',
        timeout: 30000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      })

      const filePath = path.join(this.imagesDir, filename)
      const writer = fs.createWriteStream(filePath)

      response.data.pipe(writer)

      return new Promise((resolve, reject) => {
        writer.on('finish', () => resolve(true))
        writer.on('error', reject)
      })
    } catch (error) {
      console.error(`Error downloading image ${filename}:`, error)
      return false
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  private sanitizeFileName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim()
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–∞–Ω–Ω–µ—Ä–æ–≤
  async updateBannerImages(): Promise<void> {
    console.log('üñºÔ∏è Starting banner images update...')

    try {
      const [officialBanners, existingBanners] = await Promise.all([
        this.getOfficialBannerData(),
        this.getExistingBanners()
      ])

      console.log(`Found ${officialBanners.length} official banners and ${existingBanners.length} existing banners`)

      let downloadedCount = 0
      let skippedCount = 0

      for (const banner of officialBanners) {
        const sanitizedName = this.sanitizeFileName(banner.bannerName)
        const filename = `${sanitizedName}.webp`
        const filePath = path.join(this.imagesDir, filename)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        if (fs.existsSync(filePath)) {
          skippedCount++
          continue
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –±–∞–Ω–Ω–µ—Ä –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
        const isRelevant = existingBanners.some(existing => 
          existing.toLowerCase().includes(banner.bannerName.toLowerCase()) ||
          banner.bannerName.toLowerCase().includes(existing.toLowerCase())
        )

        if (!isRelevant && existingBanners.length > 0) {
          continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∞–Ω–Ω–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–∞—à–µ–π –±–∞–∑–µ
        }

        console.log(`Downloading: ${banner.bannerName} -> ${filename}`)
        const success = await this.downloadImage(banner.imageUrl, filename)

        if (success) {
          downloadedCount++
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
          await this.saveBannerImageInfo(banner, filename)
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000))
      }

      console.log(`‚úÖ Banner images update completed. Downloaded: ${downloadedCount}, Skipped: ${skippedCount}`)

    } catch (error) {
      console.error('‚ùå Error updating banner images:', error)
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–∞–Ω–Ω–µ—Ä–∞
  private async saveBannerImageInfo(banner: BannerImage, filename: string): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      console.log(`Saved banner image info: ${banner.bannerName} -> ${filename}`)
    } catch (error) {
      console.error('Error saving banner image info:', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–Ω–Ω–µ—Ä–∞
  getBannerImageUrl(bannerName: string): string {
    const sanitizedName = this.sanitizeFileName(bannerName)
    const filename = `${sanitizedName}.webp`
    const filePath = path.join(this.imagesDir, filename)

    if (fs.existsSync(filePath)) {
      return `/images/banners/${filename}`
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º placeholder –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return '/images/placeholder-banner.png'
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  async cleanupOldImages(): Promise<void> {
    try {
      const files = fs.readdirSync(this.imagesDir)
      const existingBanners = await this.getExistingBanners()

      for (const file of files) {
        const filePath = path.join(this.imagesDir, file)
        const stats = fs.statSync(filePath)
        
        // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –±–∞–Ω–Ω–µ—Ä–∞–º
        if (stats.mtime < new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)) {
          const bannerName = file.replace(/\.(webp|png|jpg)$/i, '').replace(/-/g, ' ')
          const isRelevant = existingBanners.some(existing => 
            existing.toLowerCase().includes(bannerName.toLowerCase())
          )

          if (!isRelevant) {
            fs.unlinkSync(filePath)
            console.log(`Deleted old banner image: ${file}`)
          }
        }
      }
    } catch (error) {
      console.error('Error cleaning up old images:', error)
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è cron –∑–∞–¥–∞—á
  initializeCronJobs(): void {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00
    cron.schedule('0 3 * * *', async () => {
      console.log('üïê Running scheduled banner images update...')
      await this.updateBannerImages()
    })

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é
    cron.schedule('0 2 * * 0', async () => {
      console.log('üßπ Running scheduled cleanup of old banner images...')
      await this.cleanupOldImages()
    })

    console.log('üìÖ Banner image cron jobs initialized')
  }

  // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–¥–ª—è API endpoint)
  async manualUpdate(): Promise<{ success: boolean; message: string; stats: any }> {
    try {
      const startTime = Date.now()
      await this.updateBannerImages()
      const duration = Date.now() - startTime

      return {
        success: true,
        message: 'Banner images updated successfully',
        stats: {
          duration: `${duration}ms`,
          timestamp: new Date().toISOString()
        }
      }
    } catch (error) {
      return {
        success: false,
        message: `Error updating banner images: ${error}`,
        stats: {}
      }
    }
  }
}

export const bannerImageService = new BannerImageService()
