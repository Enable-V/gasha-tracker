#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
 */
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcrypt'

const prisma = new PrismaClient()

async function createAdminUser() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: { role: 'ADMIN' }
    })

    if (existingAdmin) {
      console.log('‚ö†Ô∏è –ê–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.username)
      return
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
    const hashedPassword = await bcrypt.hash('admin123', 10)
    
    const admin = await prisma.user.create({
      data: {
        uid: 'admin',
        username: 'admin',
        email: 'admin@hsr-gacha.local',
        password: hashedPassword,
        role: 'ADMIN',
        isActive: true
      }
    })

    console.log('‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log(`üë§ –õ–æ–≥–∏–Ω: admin`)
    console.log(`üîë –ü–∞—Ä–æ–ª—å: admin123`)
    console.log(`üìß Email: admin@hsr-gacha.local`)
    console.log(`üÜî ID: ${admin.id}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdminUser()
