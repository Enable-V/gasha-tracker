#!/usr/bin/env tsx

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö –∫—Ä—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
 */
import { PrismaClient, GameType } from '@prisma/client'

const prisma = new PrismaClient()

async function analyzeUserPulls() {
  console.log('üîç –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∫—Ä—É—Ç–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞...\n')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
    const hsrItems = await prisma.gachaPull.findMany({
      where: { game: 'HSR' },
      select: {
        itemName: true,
        itemType: true,
        game: true
      },
      distinct: ['itemName', 'itemType'],
      orderBy: [
        { itemType: 'asc' },
        { itemName: 'asc' }
      ]
    })

    const genshinItems = await prisma.gachaPull.findMany({
      where: { game: 'GENSHIN' },
      select: {
        itemName: true,
        itemType: true, 
        game: true
      },
      distinct: ['itemName', 'itemType'],
      orderBy: [
        { itemType: 'asc' },
        { itemName: 'asc' }
      ]
    })

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:`)
    console.log(`   HSR: ${hsrItems.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    console.log(`   GENSHIN: ${genshinItems.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    console.log(`   –í—Å–µ–≥–æ: ${hsrItems.length + genshinItems.length} –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n`)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TypeScript –∫–æ–¥ –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞
    console.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞:\n')
    console.log('```typescript')
    console.log('// –ü–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
    console.log('const fullItemMappings = [')

    // HSR –ø—Ä–µ–¥–º–µ—Ç—ã
    if (hsrItems.length > 0) {
      console.log('  // === HSR –ü–†–ï–î–ú–ï–¢–´ ===')
      hsrItems.forEach(item => {
        const russianName = item.itemName // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é
        console.log(`  { englishName: '${item.itemName}', russianName: '${russianName}', game: 'HSR' as GameType, itemType: '${item.itemType}' },`)
      })
    }

    // Genshin –ø—Ä–µ–¥–º–µ—Ç—ã
    if (genshinItems.length > 0) {
      console.log('  // === GENSHIN –ü–†–ï–î–ú–ï–¢–´ ===')
      genshinItems.forEach(item => {
        const russianName = item.itemName // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é  
        console.log(`  { englishName: '${item.itemName}', russianName: '${russianName}', game: 'GENSHIN' as GameType, itemType: '${item.itemType}' },`)
      })
    }

    console.log(']')
    console.log('```\n')

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const hsrStats: { [key: string]: number } = {}
    const genshinStats: { [key: string]: number } = {}

    hsrItems.forEach(item => {
      hsrStats[item.itemType] = (hsrStats[item.itemType] || 0) + 1
    })

    genshinItems.forEach(item => {
      genshinStats[item.itemType] = (genshinStats[item.itemType] || 0) + 1
    })

    console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤:')
    console.log('\nüéÆ HSR:')
    Object.entries(hsrStats).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    })

    console.log('\nüéØ GENSHIN:')
    Object.entries(genshinStats).forEach(([type, count]) => {
      console.log(`   ${type}: ${count} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞–ø–ø–∏–Ω–≥–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤...')
    const existingMappings = await prisma.itemNameMapping.findMany()
    console.log(`   –£–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ: ${existingMappings.length} –º–∞–ø–ø–∏–Ω–≥–æ–≤`)

    const existingNames = new Set(existingMappings.map(m => `${m.englishName}_${m.game}`))
    
    let missingHSR = 0
    let missingGenshin = 0

    hsrItems.forEach(item => {
      if (!existingNames.has(`${item.itemName}_HSR`)) {
        missingHSR++
      }
    })

    genshinItems.forEach(item => {
      if (!existingNames.has(`${item.itemName}_GENSHIN`)) {
        missingGenshin++
      }
    })

    console.log(`   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å HSR: ${missingHSR} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    console.log(`   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å GENSHIN: ${missingGenshin} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)
    console.log(`   –í—Å–µ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: ${missingHSR + missingGenshin} –ø—Ä–µ–¥–º–µ—Ç–æ–≤`)

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if (missingHSR > 0 || missingGenshin > 0) {
      console.log('\n‚ùì –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã:')
      
      if (missingHSR > 0) {
        console.log('\nüìã HSR –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞:')
        hsrItems.forEach(item => {
          if (!existingNames.has(`${item.itemName}_HSR`)) {
            console.log(`   - ${item.itemName} (${item.itemType})`)
          }
        })
      }

      if (missingGenshin > 0) {
        console.log('\nüìã GENSHIN –ø—Ä–µ–¥–º–µ—Ç—ã –±–µ–∑ –º–∞–ø–ø–∏–Ω–≥–∞:')
        genshinItems.forEach(item => {
          if (!existingNames.has(`${item.itemName}_GENSHIN`)) {
            console.log(`   - ${item.itemName} (${item.itemType})`)
          }
        })
      }
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

analyzeUserPulls()
